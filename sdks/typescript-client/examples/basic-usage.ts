/**
 * EngramDB TypeScript Client Example: Basic Usage
 * 
 * This example demonstrates how to use the EngramDB TypeScript client to interact with the API.
 */
import { EngramClient, AttributeFilter, FilterOperation } from '../src';

async function runExample() {
  // Initialize the client
  const client = new EngramClient({ apiUrl: 'http://localhost:8000/v1' });
  
  // Create a database
  console.log('Creating a new database...');
  const db = await client.createDatabase('example_database');
  console.log(`Created database with ID: ${db.id}`);
  
  // Create memory nodes
  console.log('\nCreating memory nodes...');
  
  // Create a node with a vector embedding
  const vector1 = [0.1, 0.2, 0.3, 0.4];
  const node1 = await db.createNode({
    vector: vector1,
    attributes: {
      title: 'Example Memory 1',
      category: 'example',
      importance: 0.8,
    },
    content: 'This is the first example memory in our database.',
  });
  console.log(`Created node 1 with ID: ${node1.id}`);
  
  // Create a node from text content (embeddings generated by API)
  const node2 = await db.createNodeFromContent({
    content: 'This is the second example memory, created directly from text content.',
    model: 'default',
    attributes: {
      title: 'Example Memory 2',
      category: 'example',
      importance: 0.6,
    },
  });
  console.log(`Created node 2 with ID: ${node2.id}`);
  
  // Create more nodes
  const vector3 = [0.15, 0.25, 0.35, 0.45];
  const node3 = await db.createNode({
    vector: vector3,
    attributes: {
      title: 'Important Meeting Notes',
      category: 'meeting',
      importance: 0.9,
    },
    content: 'Notes from the quarterly planning meeting with the executive team.',
  });
  console.log(`Created node 3 with ID: ${node3.id}`);
  
  const vector4 = [0.2, 0.3, 0.4, 0.5];
  const node4 = await db.createNode({
    vector: vector4,
    attributes: {
      title: 'Research Paper Summary',
      category: 'research',
      importance: 0.75,
    },
    content: 'Summary of the latest research paper on vector databases and semantic search.',
  });
  console.log(`Created node 4 with ID: ${node4.id}`);
  
  // Create connections between nodes
  console.log('\nCreating connections between nodes...');
  await node1.connect(node2.id, 'Association', { strength: 0.8 });
  console.log(`Connected node 1 to node 2 with type 'Association'`);
  
  await node1.connect(node3.id, 'Reference', { strength: 0.6 });
  console.log(`Connected node 1 to node 3 with type 'Reference'`);
  
  await node3.connect(node4.id, 'Causation', { strength: 0.7 });
  console.log(`Connected node 3 to node 4 with type 'Causation'`);
  
  // Search using vector similarity
  console.log('\nSearching for similar nodes to node 1...');
  const searchResults = await db.search({
    vector: vector1,
    limit: 3,
    threshold: 0.0,
    includeConnections: true,
  });
  
  console.log(`Found ${searchResults.length} similar nodes:`);
  for (let i = 0; i < searchResults.length; i++) {
    const { node, similarity } = searchResults[i];
    console.log(`  ${i + 1}. ${node.attributes.title} (similarity: ${similarity.toFixed(4)})`);
    
    if (node.connections.length > 0) {
      console.log(`     Connections: ${node.connections.length}`);
      for (const conn of node.connections) {
        console.log(`     - Connected to: ${conn.targetId}, Type: ${conn.typeName}`);
      }
    }
  }
  
  // Search using text query
  console.log('\nSearching with text query...');
  const textResults = await db.searchText({
    text: 'research paper',
    limit: 2,
    includeVectors: false,
  });
  
  console.log(`Found ${textResults.length} nodes matching 'research paper':`);
  for (let i = 0; i < textResults.length; i++) {
    const { node, similarity } = textResults[i];
    console.log(`  ${i + 1}. ${node.attributes.title} (similarity: ${similarity.toFixed(4)})`);
    console.log(`     Content: ${node.content}`);
  }
  
  // Filter nodes by attributes
  console.log('\nFiltering nodes by category...');
  const categoryFilter: AttributeFilter = {
    field: 'category',
    operation: FilterOperation.EQUALS,
    value: 'meeting',
  };
  
  const importanceFilter: AttributeFilter = {
    field: 'importance',
    operation: FilterOperation.GREATER_THAN,
    value: 0.7,
  };
  
  const filterResults = await db.search({
    filters: [categoryFilter, importanceFilter],
    limit: 10,
    includeConnections: true,
  });
  
  console.log(`Found ${filterResults.length} high-importance meeting nodes:`);
  for (let i = 0; i < filterResults.length; i++) {
    const { node } = filterResults[i];
    console.log(`  ${i + 1}. ${node.attributes.title}`);
    console.log(`     Importance: ${node.attributes.importance}`);
    console.log(`     Content: ${node.content}`);
  }
  
  // Update a node
  console.log('\nUpdating node 1...');
  node1.attributes.importance = 0.95;
  node1.content = 'Updated content for the first example memory.';
  await node1.save();
  console.log('Node 1 updated with new importance and content.');
  
  // Refresh a node from the database
  await node1.refresh();
  console.log(`Node 1 refreshed from database.`);
  console.log(`Current importance: ${node1.attributes.importance}`);
  console.log(`Current content: ${node1.content}`);
  
  // List all nodes
  console.log('\nListing all nodes in the database...');
  const allNodes = await db.listNodes();
  console.log(`Found ${allNodes.length} total nodes:`);
  for (let i = 0; i < allNodes.length; i++) {
    const node = allNodes[i];
    console.log(`  ${i + 1}. ${node.attributes.title} (${node.id})`);
  }
  
  // Clean up (optional)
  console.log('\nCleaning up...');
  await Promise.all([
    node1.delete(),
    node2.delete(),
    node3.delete(),
    node4.delete(),
  ]);
  console.log('All nodes deleted.');
  
  console.log('\nBasic usage example completed!');
}

// Run the example
runExample().catch(error => {
  console.error('Error in example:', error);
});